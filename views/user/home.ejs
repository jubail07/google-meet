<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css"
        integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="/user/home.css">
</head>

<body>

    <div class="wrapper">
        <div class="container w-100 h-100 d-flex flex-column justify-content-center align-items-center">
            <div class="text-div">
                <h1>Video calls and meetings <br> for everyone</h1>
                <h5 style="color: gray;">Connect, collaborate and celebrate from <br> anywhere with meet</h5>
            </div>
            <div class="meet-div">
                <button class="new-meeting">New meeting</button>
                <form action="#" style="width: 72%;">
                    <input type="text" class="join-input" placeholder="Enter a code or link">
                    <button type="submit" class="join">join</button>
                </form>
            </div>
            <div class="video-container d-flex justify-content-center flex-wrap">
                <video id="localVideo" autoplay muted playsinline
                    style="width: 300px; border: 1px solid black;"></video>
                <video id="remoteVideo" autoplay playsinline style="width: 300px; border: 1px solid black;"></video>
            </div>
            <p id="meeting-id" class="text-success mt-3"></p>
            <button class="btn btn-danger mt-3" id="hangupBtn">Hang Up</button>
        </div>
    </div>



    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct"
        crossorigin="anonymous"></script>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');
        const newMeetingBtn = document.querySelector('.new-meeting');
        const joinInput = document.querySelector('.join-input');
        const joinBtn = document.querySelector('.join');
        const meetingIdDisplay = document.getElementById('meeting-id');

        let peerConnection;
        let localStream;
        let roomId;

        const servers = {
            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],
        };

        async function startLocalStream() {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            localVideo.srcObject = localStream;
        }

        newMeetingBtn.onclick = async () => {
            try {
                roomId = Math.random().toString(36).substring(2, 8);
                await startLocalStream();
                meetingIdDisplay.textContent = `Meeting ID: ${roomId}`;
                joinRoom(roomId, true);
                console.log('abc')
                document.getElementById('hangupBtn').style.display = 'block'
                return
            } catch (error) {
                console.log(error, 'error in newMeeting')
                return
            }
        };

        joinBtn.onclick = async (e) => {
            e.preventDefault();
            roomId = joinInput.value.trim();
            if (!roomId) return alert('Please enter a valid meeting ID');
            await startLocalStream();
            joinRoom(roomId, false);
            document.getElementById('hangupBtn').style.display = 'block'
        };

        function joinRoom(room, isCaller) {
            socket.emit('join', room);
            peerConnection = new RTCPeerConnection(servers);

            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });

            peerConnection.ontrack = (event) => {
                remoteVideo.srcObject = event.streams[0];
            };

            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    socket.emit('ice-candidate', { room, candidate: event.candidate });
                }
            };

            socket.on('user-joined', async () => {
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                socket.emit('offer', { room, offer });
            });

            socket.on('offer', async (offer) => {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                socket.emit('answer', { room, answer });
            });

            socket.on('answer', async (answer) => {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
            });

            socket.on('ice-candidate', async (candidate) => {
                try {
                    await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                } catch (e) {
                    console.error('Error adding received ICE candidate', e);
                }
            });
        }

        const hangupBtn = document.getElementById('hangupBtn');

        hangupBtn.onclick = () => {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }

            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localVideo.srcObject = null;
            }

            remoteVideo.srcObject = null;
            meetingIdDisplay.textContent = '';

            // Optionally leave the room
            socket.emit('leave', roomId);
            document.getElementById('hangupBtn').style.display = 'none'
        };


    </script>

</body>

</html>